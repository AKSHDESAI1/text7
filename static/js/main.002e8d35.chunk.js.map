{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","clr","role","type","msg","About","mystyle1","color","mode","backgroundColor","useState","mystyle","setmyStyle","btnText","setbtnText","id","onClick","border","Navbar","to","title","activeclassname","aboutText","togglemode","width","cursor","htmlFor","placeholder","Textform","text","setText1","heading","onChange","event","console","log","target","value","split","rows","disabled","length","toUpperCase","showalert1","toLowerCase","navigator","clipboard","writeText","filter","e","defaultProps","App","alert1","setalert","showalert","message","setTimeout","mode1","setmode","cls","document","body","classList","add","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.002e8d35.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n\r\n       {props.alert && <div className={`alert alert-${props.alert.clr} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type} </strong>{props.alert.msg}\r\n            {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n    let mystyle1 = {\r\n        color: props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark' ? 'black' : 'white'\r\n    }\r\n    const [mystyle, setmyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n\r\n    })\r\n    const [btnText, setbtnText] = useState(\"Enable Dark mode\");\r\n\r\n    const toggleStyle = () => {\r\n        if (mystyle.color === 'white') {\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                border: '1px solid white'\r\n            })\r\n            setbtnText('Enable Dark Mode')\r\n        }\r\n        else {\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            setbtnText('Enable Light Mode')\r\n        }\r\n    }\r\n    // let mystyle = {\r\n    //     color : 'white',\r\n    //     backgroundColor : 'black'\r\n\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\" style={mystyle1}>\r\n            <h1 className='my-2'>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={mystyle1}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\"\r\n                            aria-expanded=\"true\" aria-controls=\"collapseOne\" style={mystyle1}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\"\r\n                        data-bs-parent=\"#accordionExample\" style={mystyle1}>\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse\r\n                            plugin adds the appropriate classes that we use to style each element. These classes control the\r\n                            overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of\r\n                            this with custom CSS or overriding our default variables. It's also worth noting that just about any\r\n                            HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle1} type=\"button\" data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" style={mystyle1} className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\"\r\n                        data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the\r\n                            collapse plugin adds the appropriate classes that we use to style each element. These classes\r\n                            control the overall appearance, as well as the showing and hiding via CSS transitions. You can\r\n                            modify any of this with custom CSS or overriding our default variables. It's also worth noting that\r\n                            just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit\r\n                            overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle1} type=\"button\" data-bs-toggle=\"collapse\"\r\n                            data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" style={mystyle1} className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\"\r\n                        data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the\r\n                            collapse plugin adds the appropriate classes that we use to style each element. These classes\r\n                            control the overall appearance, as well as the showing and hiding via CSS transitions. You can\r\n                            modify any of this with custom CSS or overriding our default variables. It's also worth noting that\r\n                            just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit\r\n                            overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3 mb-2\">\r\n\r\n                {/* <button type=\"button\" onClick={toggleStyle} className='btn btn-primary'>{btnText}</button> */}\r\n                <button type=\"button\" onClick={toggleStyle} className='btn btn-primary'>{btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/text7\">\r\n          {props.title}\r\n        </Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <NavLink activeclassname='active' className={`nav-link `} aria-current=\"page\" to=\"/text7\">\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li className={`nav-item `}>\r\n              <NavLink activeclassname='active' className={`nav-link `} to=\"/about123\">\r\n                {props.aboutText}\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n          <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2\" onClick={() => { props.togglemode('primary') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n            <div className=\"bg-danger rounded mx-2\" onClick={() => { props.togglemode('danger') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n            <div className=\"bg-success rounded mx-2\" onClick={() => { props.togglemode('success') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n            <div className=\"bg-warning rounded mx-2\" onClick={() => { props.togglemode('warning') }} style={{ height: '30px', width: '30px', cursor: 'pointer' }}></div>\r\n          </div>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" onClick={() => { props.togglemode(null) }} type=\"checkbox\" role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle mode</label>\r\n          </div>\r\n          <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// export function Aksh(prop) {\r\n// return <h1> {prop.aksh} </h1>;\r\n// }\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  // title: \"Set title\"\r\n  // aboutText: meshv()\r\n  // a1: 'active',\r\n  // a2: 'active'\r\n};","import React, { useState } from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const [text, setText1] = useState('');\r\n    const handleUpClick = () => {\r\n        console.log('Uppercase was clicked' + text.toUpperCase());\r\n        // setText1('You have clicked on handleUpClick');\r\n        setText1(text.toUpperCase());\r\n        props.showalert1('Your Data has been converted Uppercase Successfully', 'Success', 'info')\r\n        console.log(text);\r\n    }\r\n    const handleLoClick = () => {\r\n        props.showalert1('Your Data has converted Lowercase Successfully', 'Success', 'success')\r\n        setText1(text.toLowerCase());\r\n    }\r\n    const handleClearClick = () => {\r\n        props.showalert1('Your Data has been removed Successfully', 'Success', 'info')\r\n        setText1('');\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log('On change');\r\n        setText1(event.target.value);\r\n        console.log(text)\r\n        let a = text.split(' ')\r\n        return a;\r\n    }\r\n    const handlecopy = () => {\r\n\r\n        navigator.clipboard.writeText(text);\r\n\r\n    }\r\n\r\n    // text = 'new text';\r\n    // setText('new Text');\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n\r\n                <h1 className='mt-1 mb-2' style={{ color: props.mode === 'light' ? 'black' : 'white' }}>{props.heading} </h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{ backgroundColor: props.mode === 'light' ? 'white' : '#053960', color: props.mode === 'light' ? 'black' : 'white' }} onChange={handleOnChange} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" disabled={text.length === 0} onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-success mx-1 my-1\" disabled={text.length === 0} onClick={handleLoClick}>Convert to LowerCase</button>\r\n                {/* <br className='d-sm-none d-block' /> */}\r\n                <button className=\"btn btn-info mx-1  my-1\" disabled={text.length === 0} onClick={handleClearClick}>Clear text</button>\r\n                <button className=\"btn btn-success mx-1  my-1\" disabled={text.length === 0} onClick={handlecopy}>Copy text</button>\r\n            </div>\r\n\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1>Your Text summary</h1>\r\n                <p>{text.split(/\\s+/).filter((e) => { return e }).length}, {text.length} characters</p>\r\n                <p>{0.008 * text.split(' ').filter((e) => { return e }).length} Minutes</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Enter something to preview'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}","// import logo from \"./logo.svg\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\n// import { Aksh } from \"./components/Navbar\";\n\nfunction App() {\n  const [alert1, setalert] = useState(null);\n\n  const showalert = (message, type, color) => {\n    setalert({\n      msg: message,\n      type: type,\n      clr: color,\n    });\n\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n  const [mode1, setmode] = useState(\"light\"); //Whether dark mode is enable or not\n  // const [font1, setfont] = useState(\"dark\"); //Whether dark mode is enable or not\n  const togglemode1 = (cls) => {\n    console.log(cls)\n    document.body.className = ''\n    document.body.classList.add('bg-' + cls)\n    if (mode1 === \"dark\") {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      // setfont(\"dark\");\n      showalert(\"Light mode has been Enabled\", \"Success\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n    } else {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#040d4a\";\n      // document.title = \"TextUtils - Dark Mode\";\n\n      showalert(\"Dark mode has been Enabled\", \"Success\", \"info\");\n      // setfont(\"light\");\n    }\n  };\n  return (\n    <Router>\n      <>\n        {/*\n    <Navbar title='aksh' aboutText={meshv1()} /> */}\n        <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode1} togglemode={togglemode1} />\n        <Alert alert={alert1} />\n        {/*\n    <Aksh aksh=\"hi\" /> */}\n        {/*\n    <Aksh aksh=\"bye\" /> */}\n        {/*\n    <Navbar title=\"Textutils aksh\" aboutText=\"About textutils\" /> */}\n        {/* <h1>This is me</h1> */}\n\n        <Routes>\n          {/*\n      <About /> */}\n          {/* </Route> */}\n\n\n          <Route exact path=\"/text7\" element={<Textform showalert1={showalert} heading=\"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces \"\n            mode={mode1} />} />\n\n          <Route exact path=\"/about123\" element={<About mode={mode1} />} />\n          {/*\n      <Textform showalert1={showalert} heading=\"Enter the Text to Anaylize Below\" mode={mode1} /> */}\n          {/* </Route> */}\n        </Routes>\n        {/* <Textform showalert1={showalert} heading=\"Enter the Text to Anaylize Below\"\n        mode={mode1} /> */}\n        {/* <div className=\"container my-3\">\n\n      <About />\n    </div> */}\n        {/* <img src={logo} className=\"aksh\" alt=\"\" /> */}\n      </>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}